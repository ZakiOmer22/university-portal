generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String
  fullName      String
  role          UserRole
  profileImage  String?
  isApproved    Boolean  @default(false)
  acceptedTerms Boolean  @default(false) // <== This line must be here
  createdAt     DateTime @default(now())

  announcements Announcement[]
  employee      Employee?
  notifications Notification[]
  parent        Parent?
  student       Student?
  teacher       Teacher?
}

model Student {
  id             String       @id @default(uuid())
  userId         String       @unique
  universityId   String       @unique
  departmentId   String
  enrollmentDate DateTime
  gpa            Float        @default(0.0)
  attendance     Attendance[]
  enrollments    Enrollment[]
  grades         Grade[]      @relation("StudentGrades")
  department     Department   @relation(fields: [departmentId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  submissions    Submission[]
  parents        Parent[]     @relation("ParentChildren")
}

model Teacher {
  id           String     @id @default(uuid())
  userId       String     @unique
  departmentId String
  title        String
  grades       Grade[]
  department   Department @relation(fields: [departmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  courses      Course[]   @relation("TeacherCourses")
}

model Parent {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[] @relation("ParentChildren")
}

model Employee {
  id       String @id @default(uuid())
  userId   String @unique
  position String
  user     User   @relation(fields: [userId], references: [id])
}

model Department {
  id       String    @id @default(uuid())
  name     String    @unique
  faculty  String
  courses  Course[]
  students Student[]
  teachers Teacher[]
}

model Course {
  id           String       @id @default(uuid())
  name         String
  code         String       @unique
  credits      Int
  departmentId String
  semester     String
  attendance   Attendance[]
  department   Department   @relation(fields: [departmentId], references: [id])
  enrollments  Enrollment[]
  projects     Project[]
  teachers     Teacher[]    @relation("TeacherCourses")
  exams        Exam[]
}

model Enrollment {
  id        String  @id @default(uuid())
  studentId String
  courseId  String
  status    String  @default("enrolled")
  course    Course  @relation(fields: [courseId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
  grades    Grade[]
}

model Grade {
  id           String     @id @default(uuid())
  enrollmentId String
  teacherId    String
  studentId    String
  grade        Float
  gradePoint   Float
  semester     String
  comments     String?
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  student      Student    @relation("StudentGrades", fields: [studentId], references: [id])
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
}

model Project {
  id          String       @id @default(uuid())
  courseId    String
  title       String
  description String
  dueDate     DateTime
  maxScore    Int
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id          String   @id @default(uuid())
  projectId   String
  studentId   String
  submittedAt DateTime
  fileUrl     String
  score       Float?
  feedback    String?
  project     Project  @relation(fields: [projectId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        String   @id @default(uuid())
  studentId String
  courseId  String
  date      DateTime
  status    String

  course  Course  @relation(fields: [courseId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, courseId, date])
}

model Exam {
  id       String   @id @default(uuid())
  title    String
  date     DateTime
  courseId String
  course   Course   @relation(fields: [courseId], references: [id])
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdBy String
  createdAt DateTime @default(now())
  creator   User     @relation(fields: [createdBy], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique  // e.g. 'admin', 'teacher', ...
  label       String   // Friendly display name
  colorClass  String   // For UI colors (optional)
  permissions String[] // Array of permissions or JSON stored as String
}

enum UserRole {
  admin
  teacher
  student
  parent
  employee
  Finance
  Registrar
  Examination
  HR
  Graduated
}
